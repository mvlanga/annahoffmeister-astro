---
import { Image } from "astro:assets";
import { getPodcastSample } from "@/lib/contentful/utils";
import { SpotifyApi } from "@spotify/web-api-ts-sdk";
import Button from "@/components/Button.astro";
import PlayIcon from "@/assets/img/play.svg";
import PauseIcon from "@/assets/img/pause.svg";
import Link from "@/components/Link.astro";
import { getSpotifyIdFromUrl } from "@/lib/spotify";

const { title, spotifyShareUrl, description } = await getPodcastSample();

const api = SpotifyApi.withClientCredentials(
  import.meta.env.SPOTIFY_CLIENT_ID,
  import.meta.env.SPOTIFY_CLIENT_SECRET,
);

const episode = await api.episodes.get(
  getSpotifyIdFromUrl(spotifyShareUrl),
  "DE",
);

const episodeThumbnail = episode.images[0];
---

<div
  class="relative flex flex-wrap items-center gap-8 bg-black p-8 text-white md:flex-nowrap"
>
  <Image
    class="max-h-64 w-full object-cover md:h-full md:max-h-none md:w-auto md:max-w-1/3 xl:max-w-1/4"
    src={episodeThumbnail.url}
    alt=`Thumbnail of ${episode.name}`
    width={episodeThumbnail.width}
    height={episodeThumbnail.height}
  />

  <div class="flex flex-col justify-between gap-8 py-4">
    <div class="flex grow-[2] flex-col justify-center gap-8">
      <div class="flex flex-col gap-4">
        <p class="text-lg">{title}</p>

        <p id="preview">{description}</p>

        <p class="flex gap-2 text-sm text-neutral-300">
          {
            [
              new Date(episode.release_date).toLocaleDateString(),
              `${episode.show.name} (${episode.show.publisher})`,
              "Moderiert von Anna Hoffmeister",
            ].join(", ")
          }
        </p>

        <audio
          id="audio"
          aria-labelledby="preview"
          class="hidden"
          preload="none"
          src={episode.audio_preview_url}></audio>
      </div>

      <div class="flex flex-wrap gap-2">
        <Button
          class="w-full md:w-auto"
          isOnDark
          id="toggle-audio"
          aria-controls="audio"
        >
          <div
            class="absolute inset-0 -z-10 overflow-hidden transition-opacity group-hover:opacity-0"
          >
            <div id="audio-progress" class="h-full w-0 bg-neutral-700"></div>
          </div>
          <span class="z-20">Vorschau</span>
          <span class="relative z-20 inline-block h-6 w-6">
            <PlayIcon
              class="h-full w-full fill-current group-data-[playing]:invisible"
            />
            <PauseIcon
              class="invisible absolute inset-0 h-full w-full fill-current group-data-[playing]:visible"
            />
          </span>
        </Button>
        <Link
          class="w-full md:w-auto"
          isOnDark
          href={episode.external_urls.spotify}
          target="_blank"
        >
          <span class="md:hidden">Spotify</span>
          <span class="hidden md:block">Auf Spotify anh√∂ren</span>
        </Link>
      </div>
    </div>
  </div>
</div>

<script>
  const initAudioPreview = () => {
    const audio = document.getElementById("audio");
    const audioProgress = document.getElementById("audio-progress");
    const audioToggleButton = document.getElementById("toggle-audio");

    if (
      audio === null ||
      !(audio instanceof HTMLAudioElement) ||
      audioProgress === null ||
      audioToggleButton === null
    ) {
      return;
    }

    audio.addEventListener("timeupdate", () => {
      audioProgress.style.width = `${(audio.currentTime / audio.duration) * 100}%`;
    });

    audio.addEventListener("ended", () => {
      audioProgress.style.width = "0";
      audioToggleButton.removeAttribute("data-playing");
      audio.pause();
    });

    audioToggleButton.addEventListener("click", () => {
      const isPaused = audio.paused;

      if (isPaused) {
        audioToggleButton.setAttribute("data-playing", "");
        audio.play();
      } else {
        audioToggleButton.removeAttribute("data-playing");
        audio.pause();
      }
    });
  };

  initAudioPreview();
</script>
